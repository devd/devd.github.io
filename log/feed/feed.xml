<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Dev&#39;s log</title>
	<subtitle>On security and other things</subtitle>
	
	<link href="https://devd.me/log/feed/feed.xml" rel="self"/>
	<link href="https://devd.me/log/"/>
	<updated>2022-03-27T17:00:00-07:00</updated>
	<id>https://devd.me/log/</id>
	<author>
		<name>Devdatta Akhawe</name>
		<email></email>
	</author>
	
	<entry>
		<title>Modern Static Analysis: how the best tools empower creativity</title>
		<link href="https://devd.me/log/posts/static-analysis/"/>
		<updated>2021-05-23T17:00:00-07:00</updated>
		<id>https://devd.me/log/posts/static-analysis/</id>
		<content type="html">
		  &lt;p&gt;&lt;em&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Historically, heavyweight, slow static analysis tools focused on &lt;strong&gt;finding&lt;/strong&gt; vulnerabilities. This approach is fundamentally not the right path for scaling security in modern development. Security teams today need tools that are fast, customizable to our codebases, can easily be added to any part of the SDLC, and are effective at enforcing secure coding patterns to &lt;strong&gt;prevent&lt;/strong&gt; vulnerabilities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of my first loves is program analysis. The essential idea is simple: lets write software that can analyze other software to automatically detect (and thus prevent) bugs, or more relevant to me, security vulnerabilities. My &lt;a href=&quot;http://webblaze.cs.berkeley.edu/2010/kudzu/kudzu.pdf&quot;&gt;first paper&lt;/a&gt; ever was on Javascript dynamic analysis to find client-side bugs like XSS, postMessage flaws and so on. It is then a big surprise to a lot of people that when asked what’s my favorite static analysis tool to integrate into CI, I almost always say &lt;a href=&quot;http://semgrep.dev/&quot;&gt;Se&lt;/a&gt;&lt;a href=&quot;http://semgrep.dev/&quot;&gt;mgrep&lt;/a&gt; today (and used to say &lt;code&gt;grep&lt;/code&gt; for years).&lt;/p&gt;
&lt;p&gt;Grep and Semgrep are relatively simple and narrowly scoped. Program analysis researchers have done years of amazing work on smart algorithms to infer invariants of a whole program across function calls; while grep runs a regex on the file and Semgrep runs very complicated and smart regexes on the AST (it does more, but let’s assume that for now).&lt;/p&gt;
&lt;p&gt;To understand why I think static analysis as part of an effective SDLC of a modern application often focuses on these simpler tools, let’s walk through a bit of history of the big players in this space and how security engineering needs have evolved. This is, of course, my understanding of this space, but please correct me if I am wrong!&lt;/p&gt;
&lt;p&gt;The most famous static analysis tools common for security/reliability are Coverity, Fortify, and the linters/checks that ship with your compiler (GCC, Clang, Visual Studio toolchain). These tools are absolutely amazing! I was an intern at Coverity and I can say that the amount of technical depth and work that goes into creating these tools is mind-boggling. If you have a large C/C++ code, use Coverity! But, two things stand out about these tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Small set of target languages:&lt;/strong&gt; These tools were really designed for a small set of languages (typically C/C++ and/or Java) and each new language is a lot of work. You have to add support for parsing, then integrate semantics of the new language, and then find &amp;amp; write rules that are relatively high signal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Powerful default rules:&lt;/strong&gt; These tools shipped with a set of rules that were written down by “smart people in an ivory tower” and we had to follow them. The typical static analysis product will not make it easy write your own rules, built on top of the analysis engine. While some tools (notably, Fortify,  Checkmarx) do nowadays support writing custom rules, these are not easy to write. The main “product” for these tools were the bugs found, not the analysis engine to build on top of.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This made sense: memory unsafe languages like C/C++ were unique in that they were widely used (and still are), and the patterns for the most common security flaws (memory safety) are relatively well known and stable. The challenge was finding these patterns in a high signal manner, given all the undefined behavior in C/C++’s memory model that is commonly used.&lt;/p&gt;
&lt;p&gt;But, modern “DevOps” software development is very different. Two changes in particular are important: surge in number+types of languages and rise of security engineering as a function.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Surge in languages used&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A standard modern app today, even if it wants to have as few languages as it can, will need to have, at the least, an iOS language (Swift/Objective-C), an Android language (Kotlin or Java), an HTML front end language (Javascript, CSS, HTML), a language to manage your cloud infrastructure (Terraform, Pulumi), config files in a bunch of formats (Dockerfile, package.json), and a server side application language (JS via NPM or Python/Ruby or Go if you are lucky). And that’s the minimum: for most realistic scenarios, with large teams and a micro-services architectures, its typical for server-side infrastructure to actually use 5-6 languages if not more, and the mobile platforms to use 4 languages.&lt;/p&gt;
&lt;p&gt;Worse, a majority of newer languages are &lt;a href=&quot;https://hackernoon.com/i-finally-understand-static-vs-dynamic-typing-and-you-will-too-ad0c2bd0acc7&quot;&gt;dynamically-typed, interpreted&lt;/a&gt; and rely on patterns that are extremely difficult for static analysis. Or, put simply, there are &lt;em&gt;&lt;strong&gt;more&lt;/strong&gt;&lt;/em&gt; languages and each language is &lt;em&gt;&lt;strong&gt;harder&lt;/strong&gt;&lt;/em&gt; to statically reason about. This means that deep inference based on understanding semantics has struggled to keep up.&lt;/p&gt;
&lt;p&gt;For example, Ruby is a 25 year old language but the common use of meta-programming patterns in Ruby makes static analysis extremely difficult (I know cos I once tried!). And new languages take over at a surprising speed: Terraform is a security lynchpin for a large number of SaaS companies, but it was first launched 6 years ago and the community is already talking about newer languages like Pulumi. The classic static analysis approach of spending years working on getting a deep understanding of one language just doesn’t seem to work here. This has led to popularity of tools tied to a specific language and even framework (e.g., brakeman for Rails applications, gosec for Go apps). These tools typically analyze the abstract syntax tree (or, parse tree) of the code and don’t do deeper inter-procedural value/type analysis.&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;Rise of Security Engineering&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also called “shift left” or “devsecops”, Security is no longer seen as a checklist step after product/eng work. Instead, effective security goes where the developer goes; making the simplest path fast and safe. &lt;strong&gt;The aim is not to find bugs but to prevent vulnerabilities from ever landing in the repo.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To achieve this, engineering and security teams work together on creating frameworks and libraries for safe use, and security teams help provide input and test these frameworks. Secure coding best practices and patterns are defined and enforced. For example, a common pattern is for the security team to define a &lt;code&gt;secure_encrypt&lt;/code&gt; function that natively integrates with the key management in use (including key rotation support) and uses strong authenticated encryption algorithms. Secure coding guidelines typically would require security review of an encryption library other than &lt;code&gt;secure_encrypt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, when a pentest or bug bounty finds a new vulnerability, security engineering teams use the bugs as an input to a broader review of development best-practices: where else are we using this pattern? Can we quickly find these patterns? What’s the secure way to do this and how do we detect/discourage the unsafe pattern?&lt;/p&gt;
&lt;p&gt;As security engineering teams define best practices, they &lt;strong&gt;need a scalable, low-noise mechanism to detect unsafe practices and point developers toward safe coding mechanisms&lt;/strong&gt;. These practices are often &lt;em&gt;specific&lt;/em&gt; to the company. A security engineer today will often identify bad patterns, write a safe version, and then rely on the static analysis tool to help identify usage of the unsafe pattern in all old and new code. A static analysis engine that doesn’t allow customization and modification is a non-starter. Working with static analysis tools today is no longer a purely operational workflow, &lt;em&gt;it&lt;/em&gt;*’*&lt;em&gt;s a creative venture where a security engineer is building something new on top of the analysis engine.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;creativity-and-static-analysis&quot;&gt;Creativity and Static Analysis &lt;a class=&quot;direct-link&quot; href=&quot;#creativity-and-static-analysis&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;What does creativity mean? What does it need? Molly Mielke, &lt;a href=&quot;https://www.mollymielke.com/cc&quot;&gt;in her amazing thesis&lt;/a&gt; on computers and creativity, finds that tools that enable creativity with computers have a few characteristics.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Innovation is largely dependent on the human capacity to think creatively, and there is a strong argument to be made that technology’s primary role is to speed up the creative process…. &lt;strong&gt;Interoperable, moldable, efficient, and community-driven digital creative tools&lt;/strong&gt; hold immeasurable potential as co-creators with human beings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While I encourage you to read her whole thesis to see why this is true, I can personally attest that the tools that have allowed me to do the most have all shared these characteristics (e.g., GitHub). Let’s look at each:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Interoperable tools&lt;/strong&gt; are ones that don’t limit your work to a single piece of software’s capabilities. Static analysis tools that are only accessible when I login to their interface; that I can’t integrate with all aspects of a developer’s workflow (develop, test, land, push); all severely constrain what security can do with them. While most static analysis tools now have working integrations, they are still severely limited compared to something like grep/Semgrep. Being open-source binaries I can drop anywhere, grep/Semgrep only need the opportunity to run some code and they can be deployed. With closed engines, I have to ask if they support a particular integration; and I typically can’t run them in places where Internet access isn’t available.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Moldable tools&lt;/strong&gt; allow customization to fit your needs. As I discussed above, modern security teams need to customize tools to their needs, based on the current secure coding practices. Common customizations include file ignore lists (ignore experimental new apps or code in staging only), allowing certain unsafe tools in certain directories. For example, security engineering might want to ban raw SQL, except in the files that implements the ORM itself. But, those files still need to disallow other patterns (e.g., &lt;code&gt;eval&lt;/code&gt;) so we need to customize one specific rule and not disable the whole engine for these files. This is where Semgrep shines: path ignore lists can be customized to each rule, patterns can depend on other patterns (&lt;code&gt;pattern-not-inside&lt;/code&gt; and &lt;code&gt;pattern-inside&lt;/code&gt; checks), and matches can again be filtered (e.g., regex checks on metavariable matches).&lt;/p&gt;
&lt;p&gt;Molding a tool requires understanding what it is doing. This is again where simplicity of grep/Semgrep wins. When a grep/Semgrep rule has a false positive, it is easy to understand &lt;em&gt;why&lt;/em&gt;. In my experience, a typical flow/context/path-sensitive analysis is very frustrating to understand. Is it a false positive or a subtle, true bug? How do you customize something you don’t even understand?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Efficient tools&lt;/strong&gt; are fast! Writing new rules is iterative. You write a rule that is either too restrictive or too broad, and you iterate until you get it just right. The static analysis engine needs to integrate with the developer’s workflow: a tool that takes hours to run cannot meaningfully integrate with developer workflows either. Grep really wins for this reason; Semgrep is slightly slower but still orders of magnitude faster than the typical tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Community-driven:&lt;/strong&gt; Genius is never alone! True creativity happens when people learn and build upon each other’s work. One of the best things about working in security is the community: all blue/purple teams are in this together and continuously sharing/learning best practices. Historially, static analysis tools have not enabled this community learning/sharing lessons. This is where Semgrep truly wins due to &lt;a href=&quot;https://semgrep.dev/explore&quot;&gt;its community&lt;/a&gt;! Even if Semgrep doesn’t natively support all languages and frameworks, the community will often have a rule for it. And this repository keeps growing! If a new bug/risky-pattern is found, I can write a rule and everyone using Semgrep immediately benefits from it (and as per above, adapt it to their needs). &lt;a href=&quot;https://kwokchain.com/2021/02/05/atomic-concepts/&quot;&gt;Kevin created this fantastic image in the context of Canva’s success&lt;/a&gt;, but it adapts easily to Semgrep.&lt;br&gt;
&lt;img src=&quot;https://paper-attachments.dropbox.com/s_306A9A77B1388F284A01E903A4249CA2BEB708149474670A276D4E95386215F2_1619902482943_image.png&quot; alt=&quot;Graph on different use cases covered by semgrep, by the community, and by the security team&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Semgrep core can focus on core, wide impact use cases while the community can serve niche needs. And your security team can work on medium impact, highly niche needs of your product. These three options never really existed before.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Static analysis for security is different today.  Software is written with many more dynamic, interpreted language. And modern security teams focus on enforcing secure defaults, &lt;em&gt;not&lt;/em&gt; finding bugs.&lt;/p&gt;
&lt;p&gt;A static analysis strategy that relies on expensive, heavy integration for each language does not work in this world. Instead, light-weight AST/text-based tools that allow enforcing best practices as defined by the security/engineering teams work best. Moreover, this creative work by security teams needs tools that are interoperable, moldable, efficient, and community driven. I am excited where the Semgrep community goes as it embraces this idea.&lt;/p&gt;
&lt;p&gt;Now, this doesn’t mean smarter static analysis tools are dead. The ideas behind these tools are some of the most powerful ideas in computer science. To be successful, the tools built on these ideas need to embrace that they are creative tools in the hands of their users. How can they make their analysis fast, understandable, and community-driven? &lt;a href=&quot;https://semmle.com/&quot;&gt;Github/Semmle&lt;/a&gt; has a very similar community-driven approach. But the tool lacks the open interoperability, understandability, and speed of Semgrep. At the same time, Semgrep continues to get smarter with support for constant inference, basic flow analysis and so on.&lt;/p&gt;
&lt;p&gt;If Semmle becomes understandable, faster, open; before Semgrep becomes smarter, Semmle could win! But, either way, whatever happens, security teams win! 🙂&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://tldrsec.com/&quot;&gt;Clint Gibler&lt;/a&gt;, Matthew Finifter, Max Burkhardt, Sean Byrne for their feedback. All mistakes are mine and I would love your feedback.&lt;/em&gt;&lt;/p&gt;

			
				
				
				&lt;img src=&quot;https://devd.me/log//.netlify/functions/ga?v=1&amp;_v=j83&amp;t=pageview&amp;dr=https%3A%2F%2Frss-feed-reader.com&amp;_s=1&amp;dh=devd.me&amp;dp=%2Fposts%2Fstatic-analysis%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=Modern%20Static%20Analysis%3A%20how%20the%20best%20tools%20empower%20creativity&amp;tid=UA-5474337-3&quot; width=&quot;1&quot; height=&quot;1&quot; style=&quot;display:none&quot; alt=&quot;&quot;&gt;
			
		</content>
	</entry>
	
	<entry>
		<title>Kerckhoffs’s Law for Security Engineers</title>
		<link href="https://devd.me/log/posts/kerckhoffs-law/"/>
		<updated>2021-06-03T17:00:00-07:00</updated>
		<id>https://devd.me/log/posts/kerckhoffs-law/</id>
		<content type="html">
		  &lt;p&gt;One of the first lessons in cryptography 101 is &lt;a href=&quot;https://en.wikipedia.org/wiki/Kerckhoffs%27s_principle&quot;&gt;Kerckhoffs’s law&lt;/a&gt;: a cryptosystem should be secure even if everything about the system, except the key, is public knowledge. This is an often-repeated maxim accompanied with “there is no security with obscurity.”&lt;/p&gt;
&lt;p&gt;I always found this framing confusing: it felt inconsistent within itself. “&lt;em&gt;don’t rely on secrecy except for the secrecy of the key&lt;/em&gt;” What is so special about keys? Why is it ok to rely on the secrecy of keys and not on secrecy of anything else? And because it is so focused on keys, it’s hard to really take this foundational lesson and apply it in contexts other than cryptographic algorithms.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.theatlantic.com/magazine/archive/2002/09/homeland-insecurity/302575/&quot;&gt;Schneier’s framing&lt;/a&gt;, the aim here is &lt;em&gt;resilience&lt;/em&gt;. Secrecy is a source of brittleness. When something you relied on being secret inevitably leaks, it can be the cause of catastrophic failure. I.e., if you rely on your cryptographic algorithm remaining secret, one day it’s not and suddenly you are in a world of pain.&lt;/p&gt;
&lt;p&gt;This provides a framing of Kerckhoffs’s law that I have found very useful: the security of your system should &lt;em&gt;&lt;strong&gt;rely only on secrecy of things you can change easily&lt;/strong&gt;&lt;/em&gt;. Just using open, well-known algorithms for encryption is not enough. You need to be able to change the key easily.&lt;/p&gt;
&lt;p&gt;Usually, this means &lt;em&gt;supporting&lt;/em&gt; key rotation in the design—e.g., a encryption scheme that integrates with your key management service also includes the key version in the ciphertext. But, in my experience, a stated design goal to support rotation rarely works. Actually rotating the key regularly is the only way to be sure that you can change the key easily. Ideally, your key management service will automatically rotate secrets at a cadence.&lt;/p&gt;
&lt;p&gt;This is then an easy pattern to look for in security design or review: a cryptosystem where the key is static or not rotated regularly is a source of brittleness almost as bad as having a secret algorithm. Unfortunately, the common framing of Kerckhoffs’s law has meant every engineer will detect and flag the use of an obscure, homebrew crypto algorithm but will happily stamp an encryption scheme that never rotates the key (or worse, &lt;em&gt;can’t&lt;/em&gt; rotate the key).&lt;/p&gt;
&lt;p&gt;The reframing also provides a useful lesson for security engineering: relying on secret you are not rotating regularly is a security risk. As much as possible, rely on short-lived secrets and minimize long-lived secrets. For example, for AWS access, do not rely on IAM access keys and secrets; prefer the short-lived credentials provided by role assumption. Ask your vendors to integrate with you using role assumption rather than IAM access keys (something &lt;a href=&quot;https://aws.amazon.com/blogs/apn/securely-accessing-customer-aws-accounts-with-cross-account-iam-roles/&quot;&gt;even Amazon pushes for&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I find this philosophy also useful organizationally! A security team unwilling to talk about the architecture or design with customers or researchers is an anti-pattern: the security architecture of an application is not something you can change easily, so sharing it and getting more eyes on it can only help you make secure! Openness and transparency is the mark of a leading security organization. For example, see the Uber security team’s &lt;a href=&quot;https://eng.uber.com/bug-bounty-map/&quot;&gt;open treasure map&lt;/a&gt;. Or, see the Gitlab security team’s goal of being the &lt;a href=&quot;https://about.gitlab.com/handbook/engineering/security/&quot;&gt;most open security team in the world&lt;/a&gt;. Or, just the &lt;a href=&quot;https://www.chromium.org/Home/chromium-security&quot;&gt;Chrome Security team’s approach&lt;/a&gt; overall.&lt;/p&gt;
&lt;p&gt;Finally, it’s useful to remember the real goal here is robust security. Agility is the only way to achieve true robustness, as we learn of new vulnerabilities in systems and algorithms. Just openness in and of itself does not magically make things secure. Rather, openness is a bet that something has had more eyes on it. But even the most reviewed systems fail over time. TLS1.0, RC4, MD5, CBC, RSA — some of the most heavily reviewed systems have been broken over time and the ones we use today will likely be broken some day (hopefully, far) in the future. Can your system adapt?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://tldrsec.com/&quot;&gt;Clint Gibler&lt;/a&gt;, Hongyi Hu, Matthew Finifter, Max Burkhardt, Patrick Toomey, Russ Allbery for their feedback. All mistakes are mine and I would love your feedback!&lt;/em&gt;&lt;/p&gt;

			
				
				
				&lt;img src=&quot;https://devd.me/log//.netlify/functions/ga?v=1&amp;_v=j83&amp;t=pageview&amp;dr=https%3A%2F%2Frss-feed-reader.com&amp;_s=1&amp;dh=devd.me&amp;dp=%2Fposts%2Fkerckhoffs-law%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=Kerckhoffs%E2%80%99s%20Law%20for%20Security%20Engineers&amp;tid=UA-5474337-3&quot; width=&quot;1&quot; height=&quot;1&quot; style=&quot;display:none&quot; alt=&quot;&quot;&gt;
			
		</content>
	</entry>
	
	<entry>
		<title>Early Security for Startups</title>
		<link href="https://devd.me/log/posts/startup-security/"/>
		<updated>2022-03-27T17:00:00-07:00</updated>
		<id>https://devd.me/log/posts/startup-security/</id>
		<content type="html">
		  &lt;p&gt;&lt;em&gt;I once read blogging advice:&lt;/em&gt; &lt;em&gt;if someone asks you something, write it as a blog post and soon you will have a blog. One advice I am often asked is “I am a new startup; how should I approach security?” Here goes my attempt, based on&lt;/em&gt; &lt;a href=&quot;https://linkedin.com/in/devdattaakhawe&quot;&gt;&lt;em&gt;my experience&lt;/em&gt;&lt;/a&gt; &lt;em&gt;working at and advising hypergrowth companies. Please send me your thoughts and feedback!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;who-is-this-for%3F&quot;&gt;Who is this for? &lt;a class=&quot;direct-link&quot; href=&quot;#who-is-this-for%3F&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This is advice for early-stage startups without security teams (the post ends with advice on your first security hire!). It focuses on the basics for an early-stage startup. If you already have a security team, listen to the team!&lt;/p&gt;
&lt;p&gt;Most of my experience has been in product-led enterprise SaaS businesses. This guide is likely useful to such startups. If you are working on things like social network or a crypto product, your threat model and priorities are very different, and this guide is likely not correct for you. That said, it might still be useful!&lt;/p&gt;
&lt;p&gt;The guide also assumes that the founders and early members of the team already care about security. As an example, if you are not already using HTTPS everywhere, if you are not already on a framework like Rails that auto-escapes SQL queries, and so on, this guide is likely not for you.&lt;/p&gt;
&lt;p&gt;This guide is also &lt;em&gt;prescriptive&lt;/em&gt;: in addition to broad advice, it specifies tools and vendors to use, as founders have found this very useful. I make no attempt to be unbiased here: these are products I like and/or have some form of connection or interest in.&lt;/p&gt;
&lt;h1 id=&quot;what-is-security%3F&quot;&gt;What is security? &lt;a class=&quot;direct-link&quot; href=&quot;#what-is-security%3F&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;An easy way to come up with what a team without a security team should do is to start with understanding what a security team, if present, would do. I think of a security team’s role in 3 categories (&lt;a href=&quot;https://about.gitlab.com/handbook/engineering/security/&quot;&gt;inspired by&lt;/a&gt; &lt;a href=&quot;https://about.gitlab.com/handbook/engineering/security/&quot;&gt;GitLab’s docs&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Protect the company from data breaches:  Security teams are primarily responsible for preventing unauthorized access to data, broadly construed. A security team will help contextualize and prioritize security risk to the company and manage mitigations.&lt;/li&gt;
&lt;li&gt;Secure the product:  a software company ships products, and a security team will often be ensuring that these products do not have technical vulnerabilities (typically, as part of the product security sub-function).&lt;/li&gt;
&lt;li&gt;Customer Assurance: It’s not enough for you and your products to be secure; your customers also need to trust you are secure. This involves things like compliance certifications, answering customer security questionnaires, and helping your customers use your product securely.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s discuss each category in detail, especially in the context of an early-stage startup.&lt;/p&gt;
&lt;h1 id=&quot;protect-the-company-from-data-breaches&quot;&gt;Protect the company from data breaches &lt;a class=&quot;direct-link&quot; href=&quot;#protect-the-company-from-data-breaches&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The &lt;em&gt;possibility&lt;/em&gt; of data breaches is everywhere and the only way to prevent all data breaches is stop doing anything. Instead, a security team focuses on &lt;em&gt;risk reduction.&lt;/em&gt; A security team’s primary job is to a) identify and prioritize data breach risks to the business and b) manage/mitigate them through technology and/or processes.&lt;/p&gt;
&lt;h2 id=&quot;what-is-risk%3F&quot;&gt;What is risk? &lt;a class=&quot;direct-link&quot; href=&quot;#what-is-risk%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Risk is usually defined as the product of probability and impact: e.g., high probability and high impact issues are the highest risk. While the math helps, I find it easiest to explain risk with a story.&lt;/p&gt;
&lt;p&gt;I love hiking and I once hiked up Mt. Kilimanjaro. When I mention hiking Kili, people often ask me if the mountain was scary/risky. Truth is, mountain was fun, exhilarating, and probably one of the healthiest things I did that year. Statistically, the riskiest part of the trip was the car ride to the mountain and back.&lt;/p&gt;
&lt;p&gt;Security for early startups is similar: while you are doing something unique, most of your risk is due to the everyday hazards that affects everyone. Wear your seatbelt and you will be fine.&lt;/p&gt;
&lt;p&gt;Furthermore, for most startups, the biggest business risk is irrelevance: you don’t get to product market fit and/or you don’t cross the chasm into wide adoption. Hackers are not targeting startups with no users. But there is a “background radiation” of malicious activity on the internet targeting every modern software company that everyone needs to defend against. This background or latent risk is behind most breaches that you hear about. It is rare and exceptional for a startup to be specifically targeted persistently; rather, they get compromised by opportunistic criminals.&lt;/p&gt;
&lt;h2 id=&quot;security-risks-for-a-startup&quot;&gt;Security Risks for a startup &lt;a class=&quot;direct-link&quot; href=&quot;#security-risks-for-a-startup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If you take&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;one thing&lt;/strong&gt;&lt;/em&gt; &lt;strong&gt;away from this doc&lt;/strong&gt;, it is to focus on the common source of breaches. While the security and compliance of your product itself is important, what will get you hacked is what gets everyone else. That latest complicated side-channel exploit you read on HackerNews is unlikely to affect your startup.&lt;/p&gt;
&lt;p&gt;If I am asked what the most common source of large breaches in the last few years are, it&#39;s&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ransomware&lt;/li&gt;
&lt;li&gt;Cloud misconfiguration/leak&lt;/li&gt;
&lt;li&gt;Credential compromise via phishing, password reuse, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&#39;s go through mitigating these risks at a startup in turn.&lt;/p&gt;
&lt;h2 id=&quot;ransomware&quot;&gt;Ransomware &lt;a class=&quot;direct-link&quot; href=&quot;#ransomware&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the typical startup, ransomware is unlikely to be a large risk since most startups have small teams running modern OSes like MacOS with no legacy code. While this can change (MacOS malware is growing!), I do not believe for most startups, MacOS ransomware is an immediate risk worth prioritizing.&lt;/p&gt;
&lt;h2 id=&quot;cloud-misconfiguration&quot;&gt;Cloud Misconfiguration &lt;a class=&quot;direct-link&quot; href=&quot;#cloud-misconfiguration&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While modern cloud infrastructure is amazing, it’s far too easy to make a mistake and introduce a serious, massive vulnerability that opportunistic criminals will latch on to. &lt;a href=&quot;https://blog.christophetd.fr/cloud-security-breaches-and-vulnerabilities-2021-in-review/&quot;&gt;Christophe has a fantastic blog post&lt;/a&gt; looking back at breaches in 2021: the most common source of breaches are a) static credentials, b) misconfigured data stores that are publicly readable, and  c) SSRF on metadata services.&lt;/p&gt;
&lt;p&gt;Since AWS continues to be the most common cloud provider, I am going to focus on my recommendations for AWS that mitigate the issues above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All access in AWS should be through short lived tokens based on role assumption, ideally through your SSO provider (below). Avoid all long-lived credentials (all tooling should support role assumption today; there is almost no reason to have long-lived IAM access keys).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html&quot;&gt;Block public access&lt;/a&gt; to S3 buckets; I also recommend &lt;a href=&quot;https://www.figma.com/blog/inside-figma-getting-out-of-the-secure-shell/&quot;&gt;using modern tooling like SSM&lt;/a&gt; so that no administrative ports (like the ssh port) are listening on the open internet.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-options.html&quot;&gt;Disable IMDSv1&lt;/a&gt; for existing and all new machines (&lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options&quot;&gt;terraform config&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Regularly run a free cloud scanning tool (&lt;a href=&quot;https://github.com/duo-labs/cloudmapper&quot;&gt;cloudmapper&lt;/a&gt;/&lt;a href=&quot;https://github.com/nccgroup/ScoutSuite&quot;&gt;scoutsuite&lt;/a&gt; for AWS or &lt;a href=&quot;https://simplecspm.com/&quot;&gt;simplecspm for GCP&lt;/a&gt;) and check no AWS resources are public on the internet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these guidelines are from Scott’s &lt;a href=&quot;https://summitroute.com/downloads/aws_security_maturity_roadmap-Summit_Route.pdf&quot;&gt;fantastic AWS security roadmap&lt;/a&gt; freely available for all to use. Similar guides exist for &lt;a href=&quot;https://cloud.google.com/docs/enterprise/best-practices-for-enterprise-organizations&quot;&gt;GCP&lt;/a&gt; and &lt;a href=&quot;https://www.coffeehousecoders.org/blog/azure_security_roadmap.html&quot;&gt;Azure&lt;/a&gt; (or, Marco has a &lt;a href=&quot;https://roadmap.cloudsecdocs.com/&quot;&gt;generic one&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;credential-stuffing&quot;&gt;Credential Stuffing &lt;a class=&quot;direct-link&quot; href=&quot;#credential-stuffing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next most common source of breaches is due to account takeover/compromise by phishing or &lt;a href=&quot;https://en.wikipedia.org/wiki/Credential_stuffing&quot;&gt;credential stuffing&lt;/a&gt; of employees. This is where an employee reuses a password for work and a personal account, and the latter gets hacked. Or an employee is phished.&lt;/p&gt;
&lt;p&gt;By far, the most effective security against this is using a strong, centralized service for login to all applications that enforces &lt;a href=&quot;https://blog.cloudflare.com/cloudflare-now-supports-security-keys-with-web-authentication-webauthn/#:~:text=But%20where%20WebAuthn%20really%20shines%20is%20its%20particular%20resistance%20to%20phishing%20attacks.&quot;&gt;phish-proof webauthn MFA&lt;/a&gt; as the only supported MFA mechanism. Start by requiring all SaaS applications (e.g., Datadog, Github, Zendesk, etc.)  to only allow logins through your identity provider (Google or Okta, typically), instead of using username/password. Next, in your identity provider settings, turn on MFA and enable the options so that only webauthn is supported. Note that every other form of MFA is vulnerable to phishing and webauthn is the only secure MFA mechanism. While a few years ago just MFA was sufficient mitigation from attacks, criminals today have learnt how to phish code-based MFA and/or compromise phone numbers to steal SMS codes.&lt;/p&gt;
&lt;p&gt;In Google Workspaces (the most common identity provider at early startups), this is trivial by &lt;a href=&quot;https://support.google.com/a/answer/9378686?hl=en&quot;&gt;turning on Advanced Protection&lt;/a&gt;. Advanced Protection also enables a few other security settings that can be disruptive—in that case, you can enable the &lt;a href=&quot;https://support.google.com/a/answer/9176657&quot;&gt;“Only Security Key” option&lt;/a&gt; in the Google MFA settings for your organization.&lt;/p&gt;
&lt;p&gt;Enforcing SSO on all applications can be expensive, especially for an early, bootstrapped startup. If you can’t enable SSO, at the minimum use Google sign-in wherever available and use unique, strong passwords on each application (via a password manager) and turn on MFA. Chrome’s inbuilt password manager is free but often doesn’t work as well; I recommend &lt;a href=&quot;https://1password.com/business/&quot;&gt;1Password&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;other-common-risks&quot;&gt;Other Common Risks &lt;a class=&quot;direct-link&quot; href=&quot;#other-common-risks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, another class of issues is the Magecart-style &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_skimming#Magecart&quot;&gt;“web skimming”&lt;/a&gt; attacks: this is where an attacker compromises third-party JS on your payment page and steals credit card numbers (e.g., &lt;a href=&quot;https://techcrunch.com/2018/09/11/british-airways-breach-caused-by-credit-card-skimming-malware-researchers-say/&quot;&gt;British Airways&lt;/a&gt;). Before ransomware became such a reliable, popular way for criminals to make money, web-skimming attacks were all the rage. While a security team can implement robust defenses later, I recommend only loading JS code from your own servers as much as possible. Note that &lt;a href=&quot;https://developer.chrome.com/blog/http-cache-partitioning/&quot;&gt;cache partitioning&lt;/a&gt; means that loading from a CDN provides limited performance benefit. If you really need to include a third-party hosted JS (like marketing, sales tooling), try &lt;a href=&quot;https://dropbox.tech/security/csp-third-party-integrations-and-privilege-separation&quot;&gt;using privilege separation to limit blast radius&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;secure-the-product&quot;&gt;Secure the product &lt;a class=&quot;direct-link&quot; href=&quot;#secure-the-product&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A software company’s most important job is to ship great products that delight their customers. A good security team helps accelerate this by providing secure guardrails for product development and provides a second pair of eyes on the security risk of new features. Even with organizations with mature security teams, the responsibility for securing a feature lies with product teams: a security team only helps as an additional layer of accountability.&lt;/p&gt;
&lt;p&gt;For an early startup, the absence of a security team means that this second pair of eyes is missing: the responsibility of securing new products falls upon the engineers at a company. But this is like other fundamentals like clean code, reliability, scalability etc.; engineers need to balance product iteration and quality and make reasoned tradeoffs. While this is important, &lt;em&gt;I will stress again&lt;/em&gt;: for a relatively new startup, you are far and away more likely to get compromised by phishing and AWS misconfigurations than a nuanced bug in your application. Moreover, it is quite possible that you will pivot and &lt;em&gt;securing the wrong product has tremendous opportunity cost&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;authentication-and-login&quot;&gt;Authentication and login &lt;a class=&quot;direct-link&quot; href=&quot;#authentication-and-login&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Authentication is the one thing that every product &lt;em&gt;must&lt;/em&gt; implement securely. Mistakes can be &lt;a href=&quot;https://techcrunch.com/2011/06/20/dropbox-security-bug-made-passwords-optional-for-four-hours/&quot;&gt;embarrassing&lt;/a&gt;. For modern products, I recommend relying on &lt;a href=&quot;https://developers.google.com/identity/&quot;&gt;Google’s Identity services&lt;/a&gt;: they have fantastic usability and conversion rates. Google handles tricky issues like abuse detection, account compromise, lockout, recovery, etc. and the default Google libraries are secure by design. As a product, you will have to decide on a reasonable session timeout that works for you but note that long session timeouts (&amp;gt; 3 days) will complicate security for your customers. As an enterprise product, at some point you will likely also need to implement SAML/SCIM support. &lt;a href=&quot;https://auth0.com/docs/authenticate/protocols/saml/saml-sso-integrations&quot;&gt;Okta/Auth0&lt;/a&gt; is a relatively well-known provider that can SAML/SCIM for you—you can either use their managed services or their &lt;a href=&quot;https://github.com/auth0/&quot;&gt;libraries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you do implement password sign-in, make sure to require email verification, &lt;a href=&quot;https://dropbox.tech/security/how-dropbox-securely-stores-your-passwords&quot;&gt;store passwords securely&lt;/a&gt;, and implement a negative test (i.e., test that the wrong password does not let you log in). The &lt;a href=&quot;https://github.com/OWASP/ASVS/blob/master/5.0/en/0x11-V2-Authentication.md&quot;&gt;OWASP ASVS page on authentication&lt;/a&gt; has a long list of password authentication best practices (&lt;a href=&quot;https://github.com/OWASP/ASVS/tree/master/5.0/en&quot;&gt;the broader ASVS&lt;/a&gt; is a great resource to review for any other features you are building too).&lt;/p&gt;
&lt;h2 id=&quot;application-security&quot;&gt;Application Security &lt;a class=&quot;direct-link&quot; href=&quot;#application-security&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While there is a long list of potential product security concerns, the good news is that modern frameworks and cloud infrastructure has made shipping secure software orders of magnitude easier than in the past. Modern frameworks like React, Rails, etc. default to secure, features like &lt;a href=&quot;https://docs.github.com/en/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/about-dependabot-security-updates&quot;&gt;Dependabot (free with Github)&lt;/a&gt; and &lt;a href=&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html&quot;&gt;ECR container scanning (free with AWS)&lt;/a&gt; make it easy to monitor and patch all your dependencies. Tools like &lt;a href=&quot;https://semgrep.dev/pricing&quot;&gt;r2c/semgrep (with its community rules)&lt;/a&gt; provide a good baseline of security linting on your code (and can be integrated with a few clicks on Github). A high-quality scanner like Detectify can provide a separate external continuous scan of your application, &lt;a href=&quot;https://detectify.com/pricing&quot;&gt;again with a few clicks and self-serve signup&lt;/a&gt;. I generally recommend turning these on—in addition to the security benefits, all these will also come in very handy for customer assurance, as part of your sales process (discussed below).&lt;/p&gt;
&lt;p&gt;In addition to these generic checks for all web applications, it&#39;s also worth taking some time to think about unique risks applicable to your application. Are you shipping an electron app? Then, spend some time with the &lt;a href=&quot;https://www.electronjs.org/docs/latest/tutorial/security/&quot;&gt;electron security checklist&lt;/a&gt;. Does your product allow sharing via links? Read up on &lt;a href=&quot;https://www.youtube.com/watch?v=6AsVUS79gLw&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://freedom-to-tinker.com/2016/04/14/gone-in-six-characters-short-urls-considered-harmful-for-cloud-services/&quot;&gt;security for short links&lt;/a&gt;. Are you &lt;a href=&quot;https://support-my.plaid.com/hc/en-us/articles/4410324401047-Does-Plaid-have-access-to-my-credentials-&quot;&gt;storing credentials&lt;/a&gt;? Carefully design the handling/storage of these credentials. For your product, evaluate what are unique, critical pieces of tech in your stack and take a couple of hours to look for the relevant project/tool’s security configuration advice (if you can’t find it, ask a security engineer you trust). A good pentesting firm (I am happy to connect you with some) will also help you with resources specific to your needs; but you are the best judge of what are the critical components of your tech stack.&lt;/p&gt;
&lt;h2 id=&quot;penetration-testing&quot;&gt;Penetration Testing &lt;a class=&quot;direct-link&quot; href=&quot;#penetration-testing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As you get a firmer idea of what you are building and want to do a large launch or enterprise sales, &lt;a href=&quot;https://owasp.org/Top10/https://en.wikipedia.org/wiki/Penetration_test&quot;&gt;a white-box pentest&lt;/a&gt; can also provide a detailed evaluation of your product’s security posture. Your enterprise customers will anyways demand a pentest and using it as an opportunity to further harden your product is a great idea. “White-box” just means that the security testing firm has full read access to your source code.&lt;/p&gt;
&lt;p&gt;With pentests, the usual rule applies: pick two from Good, Fast, Cheap. I recommend always going with good and picking one between fast and cheap. As a startup, opportunity cost is high. A bad pentest can waste your time on security “vulnerabilities” that aren’t real risks and not uncover actual security issues. It’s hard to know which firms provide high quality pentests from their websites: ask the firms for references or talk to other founders for recommendations. I am a fan of &lt;a href=&quot;https://doyensec.com/&quot;&gt;Doyensec&lt;/a&gt;. Regardless of who you pick, aim to invest in a long-term relationship where you can ask them for help with small tests to large-scale full product audits.&lt;/p&gt;
&lt;h1 id=&quot;customer-assurance&quot;&gt;Customer Assurance &lt;a class=&quot;direct-link&quot; href=&quot;#customer-assurance&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;It is not enough to write trustworthy software; it is also important that your customers feel they can trust it. Customer assurance as a function is a broad area with lots of nuances, but, again, there are three categories of work that every enterprise SaaS startup will have to typically tackle.&lt;/p&gt;
&lt;h2 id=&quot;compliance-certifications&quot;&gt;Compliance Certifications &lt;a class=&quot;direct-link&quot; href=&quot;#compliance-certifications&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Certifications help assure your customers that your organization ensures a minimum baseline of security and governance practices. The most common certification in this category is the SOC2, with startups typically going with a 3-month observation period before switching to one year. For most startups today, the easiest path to getting a SOC2 certification is through one of the numerous SOC2 automation vendors like &lt;a href=&quot;https://www.vanta.com/&quot;&gt;Vanta&lt;/a&gt;. Most startups think about compliance once they are ready to sell to bigger companies, but, for early startups, I recommend reading through &lt;a href=&quot;https://twitter.com/christinacaci&quot;&gt;Christina’s&lt;/a&gt; excellent &lt;a href=&quot;https://www.vanta.com/blog/five-principles-for-building-a-secure-product&quot;&gt;Before SOC2&lt;/a&gt; post or Latacora’s &lt;a href=&quot;https://latacora.singles/2020/03/12/the-soc-starting.html&quot;&gt;SOC2 Starting 7&lt;/a&gt; to avoid a lot of pain later: most of the advice is generally good advice (and matches my advice from earlier in this document).&lt;/p&gt;
&lt;p&gt;One common mistake I have seen founders make is treating SOC2 as a set of requirements they must follow and wasting a lot of time on things that don’t make sense. If you find yourself thinking that a control just doesn’t make sense to you or is too disruptive to your organization, you can likely change it. SOC2 isn’t prescriptive on &lt;em&gt;what&lt;/em&gt; you do; rather, auditors help validate and certify that you do what you &lt;em&gt;say you do&lt;/em&gt;. Finally, don’t lose sleep over a “finding”: it usually isn’t a big deal unless it is particularly egregious. Some of the biggest companies you know (e.g., AWS) have several findings in their SOC2.&lt;/p&gt;
&lt;h2 id=&quot;security-questionnaires&quot;&gt;Security Questionnaires &lt;a class=&quot;direct-link&quot; href=&quot;#security-questionnaires&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even from your earliest customers, you are likely to hit a security review requirement that involves answering security questionnaires. These questionnaires are &lt;a href=&quot;https://latacora.micro.blog/its-weird-to/&quot;&gt;particularly hated&lt;/a&gt; in the industry, but they will likely come up often. Companies like &lt;a href=&quot;https://securitypalhq.com/&quot;&gt;SecurityPal&lt;/a&gt; can help you outsource this problem, but you still will need to help SecurityPal with the first few questionnaires.&lt;/p&gt;
&lt;p&gt;Typical early startups will not be able to achieve full marks on robust questionnaires by large-scale enterprises, but that’s fine. Avoid the trap of questionnaire-driven product development. Instead, I recommend founders prioritize customers who understand you are a startup and want to partner with you as you mature your practices.&lt;/p&gt;
&lt;p&gt;Often, most of the work involved in passing security questionnaires is writing down reasonable, common-sense policies. This is easier than it seems: Gitlab has &lt;a href=&quot;https://about.gitlab.com/handbook/engineering/security/#-resources&quot;&gt;all their policies&lt;/a&gt; public under an MIT license available that you can adapt; or, vendors like &lt;a href=&quot;https://securitypalhq.com/&quot;&gt;SecurityPal&lt;/a&gt; can help you with a basic set of policies.&lt;/p&gt;
&lt;p&gt;For early-stage startups, individual deals can be attractive enough that you fill out questionnaires for each deal. This can get expensive over time. Bigger organizations tend to prefill a number of free questionnaires like the &lt;a href=&quot;https://github.com/google/vsaq&quot;&gt;Google VSAQ&lt;/a&gt;, the &lt;a href=&quot;https://cloudsecurityalliance.org/blog/2021/09/01/what-is-caiq/&quot;&gt;CAIQ&lt;/a&gt;, and other vendor questionnaires like &lt;a href=&quot;https://www.whistic.com/&quot;&gt;Whistic&lt;/a&gt; and &lt;a href=&quot;https://www.cybergrx.com/&quot;&gt;CyberGRX&lt;/a&gt;. This can save you time, especially for smaller deals; I generally recommend waiting for the first time one of your customers asks you to fill these out. Once you have filled one out, proactively include the filled-out questionnaire along with your SOC2 and other certifications as part of the security “package” your sales team provides to prospects. Based on how sensitive the reports are, you can require an NDA or just use GMail confidential mode to share PDFs.&lt;/p&gt;
&lt;h2 id=&quot;governance%2Fsecurity-inside-your-application&quot;&gt;Governance/Security &lt;em&gt;inside&lt;/em&gt; your application &lt;a class=&quot;direct-link&quot; href=&quot;#governance%2Fsecurity-inside-your-application&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, the third category of work in customer assurance involves giving customers control over their data and configuration in your application. Your app can be secure, and your practices audited, but if it is easy to misconfigure and cause a breach, it&#39;s an issue that can still negatively impact customer trust.&lt;/p&gt;
&lt;p&gt;Typically, features that help here are put in the “enterprise” tier: this includes things like &lt;a href=&quot;https://slack.com/help/articles/203772216-SAML-single-sign-on&quot;&gt;enforcing SSO login&lt;/a&gt;, enforcing &lt;a href=&quot;https://help.dropbox.com/teams-admins/admin/manage-team-sharing&quot;&gt;sharing controls&lt;/a&gt; for outside-of-org sharing, &lt;a href=&quot;https://help.dropbox.com/teams-admins/admin/view-activity&quot;&gt;activity/audit log&lt;/a&gt; for all access and so on. While it’s impractical to have an answer for all these, I recommend founders spend some time thinking about how it would play out for their early customers. For example, you don’t have to offer logs as part of the product but assure customers that in case of a security incident on the customer’s side, you will work with them to filter out and share logs &lt;em&gt;you&lt;/em&gt; have. This can be a great tactical step to unblock deals while you build out these features longer term.&lt;/p&gt;
&lt;h1 id=&quot;starting-the-security-team&quot;&gt;Starting the security team &lt;a class=&quot;direct-link&quot; href=&quot;#starting-the-security-team&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;With luck, you hit product market fit and start scaling. When and how should a company start to build out the security team? I agree with &lt;a href=&quot;https://scrty.io/&quot;&gt;Magoo’s advice&lt;/a&gt;: you likely &lt;a href=&quot;https://medium.com/starting-up-security/you-dont-need-a-chief-security-officer-3f8d1a76b924&quot;&gt;don’t need a CSO&lt;/a&gt; as your first security hire. Instead, a focused hire on a particular sub-function (customer assurance, product security) can be far more effective and keep options open later.&lt;/p&gt;
&lt;p&gt;My advice then is to first wait till you feel like you need a security hire and then, using the discussion above, figure out which sub-function you are trying to solve for. Do you need someone to focus on customer assurance (e.g., compliance and sales security reviews)? Or do you need someone to help with the security of your cloud infrastructure?&lt;/p&gt;
&lt;p&gt;What hiring in security &lt;em&gt;cannot&lt;/em&gt; help with is engineering culture; culture is set by the founders and early engineers. An engineering team that values and cares for security will achieve far better outcomes than an engineering team that doesn’t care---hiring in security will not change that. Don’t wait to hire in security to build a culture of security (like any other horizontal function like performance).&lt;/p&gt;
&lt;p&gt;Once you have identified the exact need you want to fill, I recommend posting the role as soon as possible. Security talent is in high demand! But take your time for the first hire: a &lt;em&gt;bad&lt;/em&gt; first security hire can do more damage than a missing security team. Non-technical skills are particularly important for the first hire: avoid toxic individuals and only hire someone who believes in the mission of the company.&lt;/p&gt;

			
				
				
				&lt;img src=&quot;https://devd.me/log//.netlify/functions/ga?v=1&amp;_v=j83&amp;t=pageview&amp;dr=https%3A%2F%2Frss-feed-reader.com&amp;_s=1&amp;dh=devd.me&amp;dp=%2Fposts%2Fstartup-security%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=Early%20Security%20for%20Startups&amp;tid=UA-5474337-3&quot; width=&quot;1&quot; height=&quot;1&quot; style=&quot;display:none&quot; alt=&quot;&quot;&gt;
			
		</content>
	</entry>
</feed>
